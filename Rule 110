module top_module (
    input clk,
    input load,
    input [511:0] data,
    output reg [511:0] q
);
    reg [511:0] q_next;
    integer i;

    always @(posedge clk) begin
        if (load) begin
            q <= data;
        end else begin
            // Boundary q[0] = Rule110(q[1], q[0], 0)
            case ({q[1], q[0], 1'b0})
                3'b110,
                3'b101,
                3'b011,
                3'b010,
                3'b001: q_next[0] = 1;
                default: q_next[0] = 0;
            endcase

            // Middle cells
            for (i = 1; i < 511; i = i + 1) begin
                case ({q[i+1], q[i], q[i-1]})
                    3'b110,
                    3'b101,
                    3'b011,
                    3'b010,
                    3'b001: q_next[i] = 1;
                    default: q_next[i] = 0;
                endcase
            end

            // Boundary q[511] = Rule110(0, q[511], q[510])
            case ({1'b0, q[511], q[510]})
                3'b110,
                3'b101,
                3'b011,
                3'b010,
                3'b001: q_next[511] = 1;
                default: q_next[511] = 0;
            endcase

            // Commit update
            q <= q_next;
        end
    end
endmodule
